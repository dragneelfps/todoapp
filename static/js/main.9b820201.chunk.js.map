{"version":3,"sources":["components/Form.js","components/Note.js","components/Dashboard.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","_ref","addNote","noteTitle","useRef","react_default","a","createElement","class","ref","type","onClick","e","preventDefault","currentValue","current","value","console","log","length","onSubmit","Note","note","deleteNote","pinNote","key","id","title","pinned","Dashboard","notes","pinnedNotes","filter","otherNotes","renderNotes","map","components_Note","noteId","App","_useState","useState","_useState2","Object","slicedToArray","setNotes","components_Form","concat","toConsumableArray","components_Dashboard","newNotes","forEach","push","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b820201.chunk.js","sourcesContent":["import React, { useRef } from 'react'\nimport './Form.css'\n\nfunction Form({ addNote }) {\n\n    const noteTitle = useRef()\n    const onSubmit = (e) => {\n        e.preventDefault()\n        const currentValue = noteTitle.current.value\n        console.log(\"onSubmit: \", currentValue)\n        if(currentValue !== null && currentValue.length > 0) {\n            addNote(currentValue)\n            noteTitle.current.value = \"\"\n        }\n    }\n\n    return (\n        <form class=\"input-form\">\n            <input class=\"input\" ref={noteTitle} type=\"text\" />\n            <button class=\"submit\" onClick={(e) => onSubmit(e)}>Add Note</button>\n        </form>\n    )\n}\n\nexport default Form;","import React from 'react'\nimport './Note.css'\n\nfunction Note({ note, deleteNote, pinNote }) {\n    return (\n        <div class=\"note\" key={note.id}>\n            <span class=\"note-title\">{note.title}</span>\n            <div>\n                <button class=\"note-delete\" onClick={() => deleteNote(note.id)}>Delete</button>\n                <button class=\"note-pin\" onClick={() => pinNote(note.id)}>{note.pinned ? \"Unpin\" : \"Pin\"}</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Note","import React from 'react'\nimport Note from './Note'\nimport './Dashboard.css'\n\nfunction Dashboard({ notes, deleteNote, pinNote }) {\n    const pinnedNotes = notes.filter((note) => note.pinned)\n    const otherNotes = notes.filter((note) => !note.pinned)\n\n    const renderNotes = (notes) => notes.map((note) => {\n        return <Note note={note} deleteNote={deleteNote} pinNote={pinNote} />\n    })\n    if (notes.length > 0) {\n        return (\n            <div class=\"dashboard\">\n                {pinnedNotes.length > 0 && (\n                    <div>\n                        <h2>Pinned</h2>\n                            {renderNotes(pinnedNotes)}\n                    </div>\n                )}\n                {otherNotes.length > 0 && (\n                    <div>\n                        <h2>All Notes</h2>\n                            {renderNotes(otherNotes)}\n                    </div>\n                )}\n            </div>\n        )\n    } else {\n        return (\n            <div class=\"empty\">No Notes Found</div>\n        )\n    }\n}\n\nexport default Dashboard","import React, { useState } from 'react'\nimport './App.css'\nimport Form from './Form'\nimport Dashboard from './Dashboard'\n\nlet noteId = 0\n\nfunction App() {\n  const [notes, setNotes] = useState([])\n\n  const addNote = (noteTitle) => {\n    noteId++\n    const note = {id: noteId, title: noteTitle, pinned: false}\n    setNotes([...notes, note])\n  }\n\n  const deleteNote = (noteId) => {\n    const newNotes = []\n    notes.forEach((note) => {\n      if(note.id !== noteId) {\n        newNotes.push(note)\n      } \n    })\n    setNotes(newNotes)\n  }\n\n  const pinNote = (noteId) => {\n    const newNotes = notes.map((note) => {\n      if(note.id === noteId) {\n        note.pinned = !note.pinned\n      }\n      return note\n    })\n    setNotes(newNotes)\n  }\n\n  return (\n    <div class=\"main-content\">\n      <Form addNote={addNote}/>\n      <Dashboard notes={notes} deleteNote={deleteNote} pinNote={pinNote}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}